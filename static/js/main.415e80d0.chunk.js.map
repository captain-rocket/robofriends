{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","robotId","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAkBeA,EAhBF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,oEAAf,UACE,qBACEA,UAAU,2CACVC,IAAI,SACJC,IAAG,+BAA0BH,EAA1B,eAEL,gCACE,6BAAKF,IACL,4BAAIC,WCUGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAASR,GACpBF,KAAMO,EAAOG,GAASV,KACtBC,MAAOM,EAAOG,GAAST,OAHlBS,SCKFC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OAEE,qBAAKV,UAAU,MAAf,SACE,uBAAOA,UAAU,2CACjBW,KAAK,SACLC,YAAY,gBACVC,SAAUH,OCDHI,EANA,SAACC,GACd,OACE,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,UAA3C,SAAuDH,EAAMI,YCgBlDC,E,kDAjBb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,qDAMnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAE5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKV,MAAMI,a,GAdKQ,aCuDZC,G,wDAlDb,aAAe,IAAD,8BACZ,gBAaFC,eAAkB,SAACC,GACjB,EAAKJ,SAAS,CAAEjB,YAAaqB,EAAMC,OAAOC,SAb1C,EAAKX,MAAQ,CACXjB,OAAQ,GACRK,YAAa,IAJH,E,qDAQf,WAAqB,IAAD,OAClBwB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEtB,OAAQiC,S,oBAO1C,WACE,MAAiCZ,KAAKJ,MAA7BjB,EAAT,EAASA,OAAQK,EAAjB,EAAiBA,YACX6B,EAAelC,EAAOmC,QAAO,SAACC,GAClC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASjC,EAAYgC,kBAGvD,OAAQrC,EAAOuC,OAGb,sBAAK3C,UAAU,KAAf,UACE,oBAAIA,UAAU,0CAAd,2BAGA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,eAAC,EAAD,WACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAQkC,MAEpB,uBACA,mBAAGtC,UAAU,eAAe4C,KAAK,oCAAjC,8CAGA,uBACA,mBAAG5C,UAAU,mBAAmB4C,KAAK,yBAArC,sEAhBJ,6C,GA1BYjB,cCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.415e80d0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"card tc gray dib br3 pa3 ma2 grow ba b--light-silver bw1 shadow-5\">\n      <img\n        className=\"bg-black ba b--light-silver bw1 shadow-1\"\n        alt=\"robots\"\n        src={`https://robohash.org/${id}?200x200\"`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, robotId) => {\n        return (\n          <Card\n            key={robotId}\n            id={robots[robotId].id}\n            name={robots[robotId].name}\n            email={robots[robotId].email}\n          />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n\n    <div className='pa2'>\n      <input className='pa3 white bn bg-black shadow-5 o-70 glow'\n      type='search' \n      placeholder='Search Robots' \n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', height: '1000px'}}>{props.children}</div>\n  )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    }\n  }\n\n componentDidMount() {\n   fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => {this.setState({ robots: users })});\n }\n\n  onSearchChange  = (event) => {\n    this.setState({ searchfield: event.target.value })\n    \n  }\n  render() {\n    const  { robots, searchfield } = this.state;\n    const filterRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f-subheadline lh-title dib pa3 shadow-5\">\n          Robot Friends\n        </h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filterRobots} />\n          </ErrorBoundry>\n          <br></br>\n          <a className=\"no-underline\" href=\"https://github.com/captain-rocket\">\n            Websited Designed by Roger Brown\n          </a>\n          <br></br>\n          <a className=\"no-underline pb4\" href=\"http://www.freepik.com\">\n            Background Image Designed by Kotkoa &#8260; Freepik\n          </a>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}